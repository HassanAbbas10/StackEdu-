{"nodeJs": {
    "title": "Node.js Introduction",
    "description": [
        "Node.js is an open source server environment",
        "Node.js is free",
        "Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)",
        "Node.js uses JavaScript on the server"
    ],
    "serverComparison": {
        "title": "How Node.js Handles File Requests",
        "phpAsp": [
            "Sends the task to the computer's file system.",
            "Waits while the file system opens and reads the file.",
            "Returns the content to the client.",
            "Ready to handle the next request."
        ],
        "nodeJs": [
            "Sends the task to the computer's file system.",
            "Ready to handle the next request.",
            "When the file system has opened and read the file, the server returns the content to the client.",
            "Node.js eliminates the waiting, and simply continues with the next request.",
            "Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient."
        ]
    },
    "capabilities": {
        "title": "What Can Node.js Do?",
        "list": [
            "Node.js can generate dynamic page content",
            "Node.js can create, open, read, write, delete, and close files on the server",
            "Node.js can collect form data",
            "Node.js can add, delete, modify data in your database"
        ]
    },
    "fileDetails": {
        "title": "What is a Node.js File?",
        "description": [
            "Node.js files contain tasks that will be executed on certain events",
            "A typical event is someone trying to access a port on the server",
            "Node.js files must be initiated on the server before having any effect",
            "Node.js files have extension \".js\""
        ]
    },
    "gettingStarted": {
        "title": "Getting Started",
        "description": "Once you have downloaded and installed Node.js on your computer, let's try to display 'Hello World' in a web browser.",
        "codeExample": "var http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.end('Hello World!');\n}).listen(8080);",
        "cliDetails": [
            "Node.js files must be initiated in the 'Command Line Interface' program of your computer.",
            "How to open the command line interface on your computer depends on the operating system. For Windows users, press the start button and look for 'Command Prompt', or simply write 'cmd' in the search field.",
            "Navigate to the folder that contains the file 'myfirst.js', the command line interface window should look something like this: C:\\Users\\Your Name>_"
        ],
        "initiateFile": [
            "The file you have just created must be initiated by Node.js before any action can take place.",
            "Start your command line interface, write node myfirst.js and hit enter:",
            "Now, your computer works as a server!",
            "If anyone tries to access your computer on port 8080, they will get a 'Hello World!' message in return! \n Start your internet browser, and type in the address: http://localhost:8080"
        ]
    },
    "nodeJsWebServer": {
        "title": "Node.js as a Web Server",
        "introduction": [
            "To include a module, use the require() function with the name of the module:",
            "var http = require('http');",
            "Now your application has access to the HTTP module, and is able to create a server:"
        ],
        "example": {
            "code": "http.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.end('Hello World!');\n}).listen(8080);",
            "description": "This code snippet creates an HTTP server that listens on port 8080. When accessed, it will respond with 'Hello World!'."
        },
        "detailedExample": {
            "code": "var http = require('http');\n\n// Create a server object:\nhttp.createServer(function (req, res) {\n  res.write('Hello World!'); // Write a response to the client\n  res.end(); // End the response\n}).listen(8080);",
            "description": "This extended example shows a slightly different way to set up an HTTP server which writes 'Hello World!' to the client and closes the connection."
        }
    },
    "crudOperations": {
        "title": "CRUD in Node.js: Creating, Reading, Updating, and Deleting Data",
        "introduction": "CRUD (Create, Read, Update, Delete) operations are fundamental building blocks in web development, enabling you to interact with data in a database using Node.js as the backend environment.",
        "operations": {
            "create": {
                "description": "Adds new data to the database. Typically uses the POST HTTP method.",
                "code": "app.post('/products', async (req, res) => {\n  const newProduct = new Product(req.body);\n\n  try {\n    const savedProduct = await newProduct.save();\n    res.status(201).json(savedProduct); // 201 Created\n  } catch (err) {\n    res.status(400).json({ error: err.message }); // 400 Bad Request\n  }\n});"
            },
            "read": {
                "description": "Retrieves data from the database. Commonly uses the GET HTTP method.",
                "code": "app.get('/products', async (req, res) => {\n  try {\n    const products = await Product.find();\n    res.status(200).json(products); // 200 OK\n  } catch (err) {\n    res.status(500).json({ error: err.message }); // 500 Internal Server Error\n  }\n});"
            },
            "update": {
                "description": "Modifies existing data in the database. Can use either PUT (for full replacements) or PATCH (for partial updates) HTTP methods.",
                "code": "app.put('/products/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const updatedProduct = await Product.findByIdAndUpdate(id, req.body, { new: true });\n    if (!updatedProduct) {\n      return res.status(404).json({ error: 'Product not found' });\n    }\n    res.status(200).json(updatedProduct);\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});"
            },
            "delete": {
                "description": "Removes data from the database. Employs the DELETE HTTP method.",
                "code": "app.delete('/products/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const deletedProduct = await Product.findByIdAndDelete(id);\n    if (!deletedProduct) {\n      return res.status(404).json({ error: 'Product not found' });\n    }\n    res.status(200).json({ message: 'Product deleted successfully' });\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});"
            }
        }
    }
}}