{
    "nodeJs": {
        "title": "Node.js Introduction",
        "description": [
            "Node.js is an open source server environment",
            "Node.js is free",
            "Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)",
            "Node.js uses JavaScript on the server"
        ],
        "serverComparison": {
            "title": "How Node.js Handles File Requests",
            "phpAsp": [
                "Sends the task to the computer's file system.",
                "Waits while the file system opens and reads the file.",
                "Returns the content to the client.",
                "Ready to handle the next request."
            ],
            "nodeJs": [
                "Sends the task to the computer's file system.",
                "Ready to handle the next request.",
                "When the file system has opened and read the file, the server returns the content to the client.",
                "Node.js eliminates the waiting, and simply continues with the next request.",
                "Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient."
            ]
        },
        "capabilities": {
            "title": "What Can Node.js Do?",
            "list": [
                "Node.js can generate dynamic page content",
                "Node.js can create, open, read, write, delete, and close files on the server",
                "Node.js can collect form data",
                "Node.js can add, delete, modify data in your database"
            ]
        },
        "fileDetails": {
            "title": "What is a Node.js File?",
            "description": [
                "Node.js files contain tasks that will be executed on certain events",
                "A typical event is someone trying to access a port on the server",
                "Node.js files must be initiated on the server before having any effect",
                "Node.js files have extension \".js\""
            ]
        },
        "gettingStarted": {
            "title": "Getting Started",
            "description": "Once you have downloaded and installed Node.js on your computer, let's try to display 'Hello World' in a web browser.",
            "codeExample": "var http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.end('Hello World!');\n}).listen(8080);",
            "cliDetails": [
                "Node.js files must be initiated in the 'Command Line Interface' program of your computer.",
                "How to open the command line interface on your computer depends on the operating system. For Windows users, press the start button and look for 'Command Prompt', or simply write 'cmd' in the search field.",
                "Navigate to the folder that contains the file 'myfirst.js', the command line interface window should look something like this: C:\\Users\\Your Name>_"
            ],
            "initiateFile": [
                "The file you have just created must be initiated by Node.js before any action can take place.",
                "Start your command line interface, write node myfirst.js and hit enter:",
                "Now, your computer works as a server!",
                "If anyone tries to access your computer on port 8080, they will get a 'Hello World!' message in return! \n Start your internet browser, and type in the address: http://localhost:8080"
            ]
        },
        "nodeJsWebServer": {
            "title": "Node.js as a Web Server",
            "introduction": [
                "To include a module, use the require() function with the name of the module:",
                "var http = require('http');",
                "Now your application has access to the HTTP module, and is able to create a server:"
            ],
            "example": {
                "code": "http.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.end('Hello World!');\n}).listen(8080);",
                "description": "This code snippet creates an HTTP server that listens on port 8080. When accessed, it will respond with 'Hello World!'."
            },
            "detailedExample": {
                "code": "var http = require('http');\n\n// Create a server object:\nhttp.createServer(function (req, res) {\n  res.write('Hello World!'); // Write a response to the client\n  res.end(); // End the response\n}).listen(8080);",
                "description": "This extended example shows a slightly different way to set up an HTTP server which writes 'Hello World!' to the client and closes the connection."
            }
        },
        "crudOperations": {
            "title": "CRUD in Node.js: Creating, Reading, Updating, and Deleting Data",
            "introduction": "CRUD (Create, Read, Update, Delete) operations are fundamental building blocks in web development, enabling you to interact with data in a database using Node.js as the backend environment.",
            "operations": {
                "create": {
                    "description": "Adds new data to the database. Typically uses the POST HTTP method.",
                    "code": "app.post('/products', async (req, res) => {\n  const newProduct = new Product(req.body);\n\n  try {\n    const savedProduct = await newProduct.save();\n    res.status(201).json(savedProduct); // 201 Created\n  } catch (err) {\n    res.status(400).json({ error: err.message }); // 400 Bad Request\n  }\n});"
                },
                "read": {
                    "description": "Retrieves data from the database. Commonly uses the GET HTTP method.",
                    "code": "app.get('/products', async (req, res) => {\n  try {\n    const products = await Product.find();\n    res.status(200).json(products); // 200 OK\n  } catch (err) {\n    res.status(500).json({ error: err.message }); // 500 Internal Server Error\n  }\n});"
                },
                "update": {
                    "description": "Modifies existing data in the database. Can use either PUT (for full replacements) or PATCH (for partial updates) HTTP methods.",
                    "code": "app.put('/products/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const updatedProduct = await Product.findByIdAndUpdate(id, req.body, { new: true });\n    if (!updatedProduct) {\n      return res.status(404).json({ error: 'Product not found' });\n    }\n    res.status(200).json(updatedProduct);\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});"
                },
                "delete": {
                    "description": "Removes data from the database. Employs the DELETE HTTP method.",
                    "code": "app.delete('/products/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const deletedProduct = await Product.findByIdAndDelete(id);\n    if (!deletedProduct) {\n      return res.status(404).json({ error: 'Product not found' });\n    }\n    res.status(200).json({ message: 'Product deleted successfully' });\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});"
                }
            }
        }
    },
    "expressJs":{
        "title": "Express.js",
        "introduction": {
          "description": "Express.js is a fast, flexible, and minimalist web framework for Node.js. It’s an effective tool that simplifies building web applications and APIs using JavaScript on the server side. Express is open-source, developed and maintained by the Node.js foundation."
        },
        "whyLearnExpress": {
          "title": "Why Learn Express.js?",
          "description": "Express.js offers a robust set of features that enhance your productivity and streamline your web application. It makes it easier to organize your application’s functionality with middleware and routing, adds helpful utilities to Node HTTP objects, and facilitates the rendering of dynamic HTTP objects."
        },
        "coreFeatures": {
          "expressFunction": {
            "description": "Creates an Express application. The express() function is a top-level function exported by the express module.",
            "code": "const express = require('express')\nconst app = express()"
          },
          "applicationObject": {
            "description": "The app object conventionally denotes the Express application. It has methods for routing HTTP requests, configuring middleware, rendering HTML views, and registering a template engine.",
            "examples": [
              {
                "description": "Creating and setting up the Express application.",
                "code": "const express = require('express')\nconst app = express()\n\napp.get('/', (req, res) => {\n  res.send('hello world')\n})\n\napp.listen(3000)"
              }
            ]
          },
          "mountPath": {
            "description": "The app.mountpath property contains one or more path patterns on which a sub-app was mounted.",
            "example": "const express = require('express')\n\nconst app = express() // the main app\nconst admin = express() // the sub app\n\nadmin.get('/', (req, res) => {\n  console.log(admin.mountpath) // /admin\n  res.send('Admin Homepage')\n})\n\napp.use('/admin', admin) // mount the sub app"
          },
          "router": {
            "description": "The application’s in-built instance of router. This is created lazily, on first access, and you can add middleware and HTTP method routes to the router just like an application.",
            "code": "const express = require('express')\nconst app = express()\nconst router = app.router\n\nrouter.get('/', (req, res) => {\n  res.send('hello world')\n})\n\napp.listen(3000)"
          }
        },"routerObjects": {
            "title": "Router Objects",
            "description": "You can group routes together using routers which can be used for organization and to apply middleware to a specific group of routes.",
            "creatingRouter": {
              "description": "Create a Router object and register it with the application for routes with a certain prefix.",
              "code": "const router = express.Router();\napp.use('/prefix', router);\nrouter.use(middlewareFunction);\nrouter.get('/endpoint', routerHandler); // URL is /prefix/endpoint"
            }
          },
          "connectingToDatabases": {
            "title": "Connecting to Databases",
            "description": "The following libraries can help you connect to different databases:",
            "libraries": [
              {
                "name": "mongoose",
                "description": "for connecting to a MongoDB database.",
                "link": "https://mongoosejs.com/"
              },
              {
                "name": "sequelize",
                "description": "ORM for SQL databases like PostgreSQL, MySQL, etc.",
                "link": "https://sequelize.org/"
              },
              {
                "name": "objection",
                "description": "ORM for SQL databases (PostgreSQL, MySQL, etc.).",
                "link": "https://vincit.github.io/objection.js/"
              },
              {
                "name": "waterline",
                "description": "ORM for SQL databases (PostgreSQL, MySQL, etc.).",
                "link": "https://waterlinejs.org/"
              }
            ]
          },
          "makingApiCalls": {
            "title": "Making API Calls",
            "description": "While you can't use fetch natively in Node, and jQuery is only a frontend library, you have some alternatives for making API calls.",
            "options": [
              {
                "name": "node-fetch",
                "description": "A library that replicates the browser's fetch function.",
                "link": "https://www.npmjs.com/package/node-fetch"
              },
              {
                "name": "Axios",
                "description": "A powerful library for making HTTP requests.",
                "link": "https://axios-http.com/"
              },
              {
                "name": "GOT",
                "description": "A versatile HTTP request library.",
                "link": "https://github.com/sindresorhus/got"
              },
              {
                "name": "needle",
                "description": "Another HTTP client library.",
                "link": "https://www.npmjs.com/package/needle"
              }
            ]
          }
    },
    "mongodb":{
        "mongodbOverview": {
          "title": "MongoDB",
          "description": "MongoDB is a document database and can be installed locally or hosted in the cloud."
        },
        "databaseComparison": {
          "title": "SQL vs Document Databases",
          "description": [
            "SQL databases are considered relational databases. They store related data in separate tables. When data is needed, it is queried from multiple tables to join the data back together.",
            "MongoDB is a document database which is often referred to as a non-relational database. This does not mean that relational data cannot be stored in document databases. It means that relational data is stored differently. A better way to refer to it is as a non-tabular database.",
            "MongoDB stores data in flexible documents. Instead of having multiple tables you can simply keep all of your related data together. This makes reading your data very fast.",
            "You can still have multiple groups of data too. In MongoDB, instead of tables, these are called collections."
          ]
        },
        "localVsCloud": {
          "title": "Local vs Cloud Database",
          "description": [
            "MongoDB can be installed locally, which will allow you to host your own MongoDB server on your hardware. This requires you to manage your server, upgrades, and any other maintenance.",
            "You can download and use the MongoDB open source Community Server on your hardware for free.",
            "However, for this course we are going to use MongoDB Atlas, a cloud database platform. This is much easier than hosting your own local database.",
            "To be able to experiment with the code examples, you will need access to a MongoDB database.",
            "Sign up for a free MongoDB Atlas account to get started."
          ]
        },
        "creatingCluster": {
          "title": "Creating a Cluster",
          "description": [
            "After you have created your account, set up a free 'Shared Cluster' then choose your preferred cloud provider and region.",
            "By default, MongoDB Atlas is completely locked down and has no external access.",
            "You will need to set up a user and add your IP address to the list of allowed IP addresses.",
            "Under 'Database Access', create a new user and keep track of the username and password.",
            "Next, under 'Network Access', add your current IP address to allow access from your computer."
          ]
        },
        "installMongoDBShell": {
          "title": "Install MongoDB Shell (mongosh)",
          "description": [
            "There are many ways to connect to your MongoDB database.",
            "We will start by using the MongoDB Shell, mongosh.",
            "Use the official instructions to install mongosh on your operating system.",
            "To verify that it has been installed properly, open your terminal and type: mongosh --version",
            "You should see that the latest version is installed.",
            "The version used in this tutorial is v1.3.1."
          ]
        },
        "connectToDatabase": {
          "title": "Connect to the database",
          "description": [
            "To connect to your database, you will need your database specific connection string.",
            "In the MongoDB Atlas dashboard, under 'Databases', click the 'Connect' button for your Cluster.",
            "Next, choose 'Connect with the MongoDB Shell'.",
            "Copy your connection string.",
            "Example: Your connection string should look similar to this: mongosh 'mongodb+srv://cluster0.ex4ht.mongodb.net/myFirstDatabase' --apiVersion 1 --username YOUR_USER_NAME"
          ]
        }, 
        "mongoCommands": {
            "showDatabases": {
              "title": "Show Databases",
              "description": "Displays all databases on the MongoDB server.",
              "codeSnippet": [
                "show dbs",
                "db // prints the current database"
              ]
            },
            "switchDatabase": {
              "title": "Switch Database",
              "description": "Switches the context to a specific database.",
              "codeSnippet": "use <database_name>"
            },
            "showCollections": {
              "title": "Show Collections",
              "description": "Displays all collections in the current database.",
              "codeSnippet": "show collections"
            },
            "runJavaScriptFile": {
              "title": "Run JavaScript File",
              "description": "Executes a JavaScript file in the context of the MongoDB shell.",
              "codeSnippet": "load(\"myScript.js\")"
            },
            "databasesAndCollections": {
              "title": "Databases and Collections",
              "operations": {
                "drop": {
                  "title": "Drop",
                  "description": "Removes the specified collection and its index definitions or drops the entire database.",
                  "codeSnippet": [
                    "db.coll.drop() // removes the collection and its index definitions",
                    "db.dropDatabase() // double check that you are *NOT* on the PROD cluster..."
                  ]
                },
                "createCollection": {
                  "title": "Create Collection",
                  "description": "Creates a collection with a $jsonschema validator to enforce data integrity.",
                  "codeSnippet": "db.createCollection(\"contacts\", {\n   validator: {$jsonSchema: {\n      bsonType: \"object\",\n      required: [\"phone\"],\n      properties: {\n         phone: {\n            bsonType: \"string\",\n            description: \"must be a string and is required\"\n         },\n         email: {\n            bsonType: \"string\",\n            pattern: \"@mongodb.com$\",\n            description: \"must be a string and match the regular expression pattern\"\n         },\n         status: {\n            enum: [ \"Unknown\", \"Incomplete\" ],\n            description: \"can only be one of the enum values\"\n         }\n      }\n   }}\n})"
                }
              }
            }

      },
    "vueJs":{


    },
    "angularJs":{

    },
    "reactJS":{

    },
    "javaScript":{


    }
}