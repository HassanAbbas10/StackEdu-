NODE JS INTRODUCTION

What is Node.js?

Node.js is an open source server environment
Node.js is free
Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Node.js uses JavaScript on the server




A common task for a web server can be to open a file on the server and return the content to the client.

Here is how PHP or ASP handles a file request:

Sends the task to the computer's file system.
Waits while the file system opens and reads the file.
Returns the content to the client.
Ready to handle the next request.
Here is how Node.js handles a file request:

Sends the task to the computer's file system.
Ready to handle the next request.
When the file system has opened and read the file, the server returns the content to the client.
Node.js eliminates the waiting, and simply continues with the next request.
Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.




What Can Node.js Do?

Node.js can generate dynamic page content
Node.js can create, open, read, write, delete, and close files on the server
Node.js can collect form data
Node.js can add, delete, modify data in your database




What is a Node.js File?

Node.js files contain tasks that will be executed on certain events
A typical event is someone trying to access a port on the server
Node.js files must be initiated on the server before having any effect
Node.js files have extension ".js"




Download Node.js
The official Node.js website has installation instructions for Node.js: https://nodejs.org




Getting Started

Once you have downloaded and installed Node.js on your computer, let's try to display "Hello World" in a web browser.




Create a Node.js file named "myfirst.js", and add the following code:

myfirst.js

	var http = require('http');

	http.createServer(function (req, res) {
  	res.writeHead(200, {'Content-Type': 'text/html'});
  	res.end('Hello World!');
	}).listen(8080);


Save the file on your computer: C:\Users\Your Name\myfirst.js





The code tells the computer to write "Hello World!" if anyone (e.g. a web browser) tries to access your computer on port 8080.

For now, you do not have to understand the code. It will be explained later.

Command Line Interface

Node.js files must be initiated in the "Command Line Interface" program of your computer.
How to open the command line interface on your computer depends on the operating system. For Windows users, press the start button and look for "Command Prompt", or simply write "cmd" in the search field.

Navigate to the folder that contains the file "myfirst.js", the command line interface window should look something like this:

	C:\Users\Your Name>_




Initiate the Node.js File

The file you have just created must be initiated by Node.js before any action can take place.

Start your command line interface, write node myfirst.js and hit enter:

Initiate "myfirst.js":

	C:\Users\Your Name>node myfirst.js

Now, your computer works as a server!

If anyone tries to access your computer on port 8080, they will get a "Hello World!" message in return!

Start your internet browser, and type in the address: http://localhost:8080






Include Modules

To include a module, use the require() function with the name of the module:

	var http = require('http');
Now your application has access to the HTTP module, and is able to create a server:

	http.createServer(function (req, res) {
  	res.writeHead(200, {'Content-Type': 'text/html'});
  	res.end('Hello World!');
	}).listen(8080);



Node.js as a Web Server

The HTTP module can create an HTTP server that listens to server ports and gives a response back to the client.

Use the createServer() method to create an HTTP server:

Example

	var http = require('http');

	//create a server object:
	http.createServer(function (req, res) {
 	 res.write('Hello World!'); //write a response to the client
  	res.end(); //end the response
	}).listen(8080); //the server object listens on port 8080



CRUD in Node.js: Creating, Reading, Updating, and Deleting Data

CRUD (Create, Read, Update, Delete) operations are fundamental building blocks in web development, enabling you to interact with data in a database using Node.js as the backend environment. Here's a breakdown of each CRUD operation:




Create

Adds new data to the database.
Typically uses the POST HTTP method.

		app.post('/products', async (req, res) => {
    	const newProduct = new Product(req.body);

   	 try {
        const savedProduct = await newProduct.save();
        res.status(201).json(savedProduct); // 201 Created
   	 } catch (err) {
        res.status(400).json({ error: err.message }); // 400 Bad Request
    	}
	});






Read

Retrieves data from the database.
Commonly uses the GET HTTP method.

	// Read (GET) all products
	app.get('/products', async (req, res) => {
    	try {
       	 const products = await Product.find();
       	 res.status(200).json(products); // 200 OK
    	} catch (err) {
        	res.status(500).json({ error: err.message }); // 500 Internal Server Error
    	}
	});


Update

Modifies existing data in the database.
Can use either PUT (for full replacements) or PATCH (for partial updates) HTTP methods.

	// Update (PUT) a product by ID
	app.put('/products/:id', async (req, res) => {
    	const { id } = req.params;

    	try {
        	const updatedProduct = await Product.findByIdAndUpdate(id, req.body, { new: true });
        	if (!updatedProduct) {
            	return res.status(404).json({ error: 'Product not found' });
        	}
        	res.status(200).json(updatedProduct);
    	} catch (err) {
        	res.status(500).json({ error: err.message });
    	}
		});




Delete

Removes data from the database.
Employs the DELETE HTTP method.


		// Delete (DELETE) a product by ID
	app.delete('/products/:id', async (req, res) => {
    	const { id } = req.params;

    	try {
        	const deletedProduct = await Product.findByIdAndDelete(id);
        	if (!deletedProduct) {
            	return res.status(404).json({ error: 'Product not found' });
        	}
        	res.status(200).json({ message: 'Product deleted successfully' });
    	} catch (err) {
        	res.status(500).json({ error: err.message });
    	}
	});
