AngularJS is a JavaScript framework. It can be added to an HTML page with a <script> tag.
What is Angularjs?

AngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.

AngularJS is a JavaScript Framework
AngularJS is a JavaScript framework written in JavaScript.

AngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag:

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js"></script>






AngularJS Extends HTML

AngularJS extends HTML with ng-directives.

The ng-app directive defines an AngularJS application.

The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.

The ng-bind directive binds application data to the HTML view.









AngularJS History

AngularJS version 1.0 was released in 2012.

Miško Hevery, a Google employee, started to work with AngularJS in 2009.

The idea turned out very well, and the project is now officially supported by Google.






AngularJS Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js"></script>
<body>

<div ng-app="">
  <p>Name: <input type="text" ng-model="name"></p>
  <p ng-bind="name"></p>
</div>

</body>
</html>






1. Setup

The following command installs Angular CLI globally:

	npm install -g @angular/cli



2. New Application

The following command sets the prefix to “best:”

	ng new best-practises --prefix best

This command checks the available command list.

	ng new --help

This command simulates the “ng new” command:

	ng new best-practises --dry-run





3. Lint for Formatting

The Lint command fixes code smells and corrects improper formatting.

	ng lint my-app --fix


This next command shows warnings:

	ng lint my-app


If you want to format the code, you can use the following command. 

	ng lint my-app --format stylish

Next, this command verifies the accessible list of commands.

	ng lint my-app --help





4. Blueprints

Generate spec:

--spec
Check whether the template will be a.ts file or not:

--inline-template (-t)
Check whether the style will be in the.ts file or not:

--inline-style (-s)
Create a directive:

ng g d directive-name
Create a pipeline:

ng g p init-caps
Create customer class in the models folder:

ng g cl models/customer
Creates a component without the need for the creation of a new folder.

ng g c my-component --flat true
Assign a prefix:

--prefix
Create an interface in the models folder:

ng g i models/person
Create an ENUM gender in the models folder:

ng g e models/gender
Create a service:

ng g s service-name





5. Building Serving

Build an app to /dist folder:

	ng build

Optimize and build an app without using unnecessary code:

	ng build --aot

Create a build for production:

	ng build --prod

Specify serve with opening a browser:

	ng serve -o

Reload when changes occur:

	ng serve --live-reload

Serve using SSL:

	ng serve -ssl






6. Add New Capabilities

Add angular material to project:

	ng add @angular/material

Create a material navigation component:

	ng g @angular/material:material-nav --name nav







Components and Templates

Components are the most fundamental Angular UI building pieces. An Angular component tree makes up an Angular app.

Sample Component ts File


	import { Component } from '@angular/core';

	@Component({

	// component attributes

	selector: 'app-root',

	templateUrl: './app.component.html',

	styleUrls: ['./app.component.less']

	})

	export class AppComponent {

	title = 'Hello World';

	}







Input and Output

Input() To pass value into child component

Sample child component implementation:

	export class SampleComponent {

	@Input() value: any/string/object/…;

	...

	}


Sample parent component usage:

<	app-sample-component [value]="myValue"></app-sampe-component>

Output() Emitting event to parent component

Sample child component:

	@Output() myEvent: EventEmitter = new EventEmitter();

	onRemoved(item: MyModel) {

	this.myEvent.emit(item);

	}

Sample parent component:

	<app-my-component 

	(myEvent)="someFunction()"></app-my-component>

onRemoved in the child component is calling the someFunction() method in the parent 	component, as we can see in the above two child and parent components.








ViewChild Decorator

Offers access to child component/directive/element:

	@ViewChild(NumberComponent)

	private numberComponent: NumberComponent;

	increase() {

	this.numberComponent.increaseByOne(); //method from child component

	}

	decrease() {

	this.numberComponent.decreaseByOne(); //method from child component

	}







Routing

The Angular Router enables navigation from one view to the next as users perform application tasks.

Sample routing ts file:

	const appRoutes: Routes = [

	{ path: 'crisis-center', component: CrisisListComponent },

	{ path: 'prod/:id', component: HeroDetailComponent },

	{

	path: 'products',

	component: ProductListComponent,

	data: { title: 'Products List' }

	},

	{ path: '',

	redirectTo: '/products',

	pathMatch: 'full'

	},

	{ path: '**', component: PageNotFoundComponent }

	];


Then, this should be added inside Angular.module imports:

	RouterModule.forRoot(appRoutes)












Modules

Angular apps are modular and Angular has its own modularity system called NgModules. NgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.

Sample Module with Comments


	import { BrowserModule } from '@angular/platform-browser';

	import { NgModule } from '@angular/core';

	import { AppRoutingModule } from './app-routing.module';

	import { AppComponent } from './app.component';

	@NgModule({

	declarations: [AppComponent], // components, pipes, directives

	imports: [BrowserModule, AppRoutingModule], // other modules

	providers: [], // services

	bootstrap: [AppComponent] // top component

	})

	export class AppModule { }



Services

Components shouldn't fetch or save data directly and they certainly shouldn't knowingly present fake data. Instead, they should focus on presenting data and delegate data access to a service.

Sample service with one function:

	@Injectable()

	export class MyService {

	public items: Item[];

	constructor() { }

	getSth() {

	// some implementation

	}

	}




HttpClient

This command handles and consumes http requests.

Add import to module:

	import { HttpClientModule} from "@angular/common/http";

You can use the above statement in the following way:

	import {HttpClient} from '@angular/common/http';

	...

// GET

	public getData(): Observable {

	return this.http.get('api/users/2');

	}

// POST

	public send(val1: any, val2: any): Observable {

	const object = new SendModel(val1, val2);

	const options = {headers: new HttpHeaders({'Content-type': 'application/json'})};

	return this.http.post(environment.apiUrl + 'api/login', object, options);

	}










Angular Forms

In this section of our Angular 4 cheat sheet, we’ll discuss different types of Angular forms. 

Template Driven Forms
Form logic (validation, properties) are kept in the template.

sample html

	<form name="form" (ngSubmit)="f.form.valid && onSubmit()" #f="ngForm" novalidate>

	<div class="form-group">

	<label for="firstName">First Name</label>

	<input type="text" class="form-control" name="firstName" [(ngModel)]="model.firstName" 	#firstName="ngModel" [ngClass]="{ 'is-invalid': f.submitted && firstName.invalid }" 	required />

	<div *ngIf="f.submitted && firstName.invalid" class="invalid-feedback">

	<div *ngIf="firstName.errors.required">First Name is required</div>

	</div>

	</div>

	<div class="form-group">

	<button class="btn btn-primary">Register</button>

	</div>

	</form>










Unit tests

Unit testing, in general, is a type of software testing level that checks various components of an application separately. In Angular, the default unit testing framework is Jasmine. It is widely utilized while developing an Angular project using CLI. 

Service:

	describe('MyService', () => {

	let service: MyService;

	beforeEach(() => service = new MyService();

	if('#fetch should update data', () => {
	
	service.fetchData();

	expect(service.data.length).toBe(4);

	expect(service.data[0].id).toBe(1);

	});

	});


For async functions:

	if('#fetch should update data', (done: DoneFn) => {

// some code

	done(); // we need 'done' to avoid test finishing before date was received

// some code

	});

example async test:


	it('http client works', (done: DoneFn) => {

	service.getUser().subscribe((data) => {

	expect(data).toBe('test');

	done();

	});

	 });


