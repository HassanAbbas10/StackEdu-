{
    "nodeJs": {
        "title": "Node.js Introduction",
        "description": [
            "Node.js is an open source server environment",
            "Node.js is free",
            "Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)",
            "Node.js uses JavaScript on the server"
        ],
        "serverComparison": {
            "title": "How Node.js Handles File Requests",
            "phpAsp": [
                "Sends the task to the computer's file system.",
                "Waits while the file system opens and reads the file.",
                "Returns the content to the client.",
                "Ready to handle the next request."
            ],
            "nodeJs": [
                "Sends the task to the computer's file system.",
                "Ready to handle the next request.",
                "When the file system has opened and read the file, the server returns the content to the client.",
                "Node.js eliminates the waiting, and simply continues with the next request.",
                "Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient."
            ]
        },
        "capabilities": {
            "title": "What Can Node.js Do?",
            "list": [
                "Node.js can generate dynamic page content",
                "Node.js can create, open, read, write, delete, and close files on the server",
                "Node.js can collect form data",
                "Node.js can add, delete, modify data in your database"
            ]
        },
        "fileDetails": {
            "title": "What is a Node.js File?",
            "description": [
                "Node.js files contain tasks that will be executed on certain events",
                "A typical event is someone trying to access a port on the server",
                "Node.js files must be initiated on the server before having any effect",
                "Node.js files have extension \".js\""
            ]
        },
        "gettingStarted": {
            "title": "Getting Started",
            "description": "Once you have downloaded and installed Node.js on your computer, let's try to display 'Hello World' in a web browser.",
            "codeExample": "var http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.end('Hello World!');\n}).listen(8080);",
            "cliDetails": [
                "Node.js files must be initiated in the 'Command Line Interface' program of your computer.",
                "How to open the command line interface on your computer depends on the operating system. For Windows users, press the start button and look for 'Command Prompt', or simply write 'cmd' in the search field.",
                "Navigate to the folder that contains the file 'myfirst.js', the command line interface window should look something like this: C:\\Users\\Your Name>_"
            ],
            "initiateFile": [
                "The file you have just created must be initiated by Node.js before any action can take place.",
                "Start your command line interface, write node myfirst.js and hit enter:",
                "Now, your computer works as a server!",
                "If anyone tries to access your computer on port 8080, they will get a 'Hello World!' message in return! \n Start your internet browser, and type in the address: http://localhost:8080"
            ]
        },
        "nodeJsWebServer": {
            "title": "Node.js as a Web Server",
            "introduction": [
                "To include a module, use the require() function with the name of the module:",
                "var http = require('http');",
                "Now your application has access to the HTTP module, and is able to create a server:"
            ],
            "example": {
                "code": "http.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.end('Hello World!');\n}).listen(8080);",
                "description": "This code snippet creates an HTTP server that listens on port 8080. When accessed, it will respond with 'Hello World!'."
            },
            "detailedExample": {
                "code": "var http = require('http');\n\n// Create a server object:\nhttp.createServer(function (req, res) {\n  res.write('Hello World!'); // Write a response to the client\n  res.end(); // End the response\n}).listen(8080);",
                "description": "This extended example shows a slightly different way to set up an HTTP server which writes 'Hello World!' to the client and closes the connection."
            }
        },
        "crudOperations": {
            "title": "CRUD in Node.js: Creating, Reading, Updating, and Deleting Data",
            "introduction": "CRUD (Create, Read, Update, Delete) operations are fundamental building blocks in web development, enabling you to interact with data in a database using Node.js as the backend environment.",
            "operations": {
                "create": {
                    "description": "Adds new data to the database. Typically uses the POST HTTP method.",
                    "code": "app.post('/products', async (req, res) => {\n  const newProduct = new Product(req.body);\n\n  try {\n    const savedProduct = await newProduct.save();\n    res.status(201).json(savedProduct); // 201 Created\n  } catch (err) {\n    res.status(400).json({ error: err.message }); // 400 Bad Request\n  }\n});"
                },
                "read": {
                    "description": "Retrieves data from the database. Commonly uses the GET HTTP method.",
                    "code": "app.get('/products', async (req, res) => {\n  try {\n    const products = await Product.find();\n    res.status(200).json(products); // 200 OK\n  } catch (err) {\n    res.status(500).json({ error: err.message }); // 500 Internal Server Error\n  }\n});"
                },
                "update": {
                    "description": "Modifies existing data in the database. Can use either PUT (for full replacements) or PATCH (for partial updates) HTTP methods.",
                    "code": "app.put('/products/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const updatedProduct = await Product.findByIdAndUpdate(id, req.body, { new: true });\n    if (!updatedProduct) {\n      return res.status(404).json({ error: 'Product not found' });\n    }\n    res.status(200).json(updatedProduct);\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});"
                },
                "delete": {
                    "description": "Removes data from the database. Employs the DELETE HTTP method.",
                    "code": "app.delete('/products/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const deletedProduct = await Product.findByIdAndDelete(id);\n    if (!deletedProduct) {\n      return res.status(404).json({ error: 'Product not found' });\n    }\n    res.status(200).json({ message: 'Product deleted successfully' });\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});"
                }
            }
        }
    },
    "expressJs":{
        "title": "Express.js",
        "introduction": {
          "description": "Express.js is a fast, flexible, and minimalist web framework for Node.js. It’s an effective tool that simplifies building web applications and APIs using JavaScript on the server side. Express is open-source, developed and maintained by the Node.js foundation."
        },
        "whyLearnExpress": {
          "title": "Why Learn Express.js?",
          "description": "Express.js offers a robust set of features that enhance your productivity and streamline your web application. It makes it easier to organize your application’s functionality with middleware and routing, adds helpful utilities to Node HTTP objects, and facilitates the rendering of dynamic HTTP objects."
        },
        "coreFeatures": {
          "expressFunction": {
            "description": "Creates an Express application. The express() function is a top-level function exported by the express module.",
            "code": "const express = require('express')\nconst app = express()"
          },
          "applicationObject": {
            "description": "The app object conventionally denotes the Express application. It has methods for routing HTTP requests, configuring middleware, rendering HTML views, and registering a template engine.",
            "examples": [
              {
                "description": "Creating and setting up the Express application.",
                "code": "const express = require('express')\nconst app = express()\n\napp.get('/', (req, res) => {\n  res.send('hello world')\n})\n\napp.listen(3000)"
              }
            ]
          },
          "mountPath": {
            "description": "The app.mountpath property contains one or more path patterns on which a sub-app was mounted.",
            "example": "const express = require('express')\n\nconst app = express() // the main app\nconst admin = express() // the sub app\n\nadmin.get('/', (req, res) => {\n  console.log(admin.mountpath) // /admin\n  res.send('Admin Homepage')\n})\n\napp.use('/admin', admin) // mount the sub app"
          },
          "router": {
            "description": "The application’s in-built instance of router. This is created lazily, on first access, and you can add middleware and HTTP method routes to the router just like an application.",
            "code": "const express = require('express')\nconst app = express()\nconst router = app.router\n\nrouter.get('/', (req, res) => {\n  res.send('hello world')\n})\n\napp.listen(3000)"
          }
        },"routerObjects": {
            "title": "Router Objects",
            "description": "You can group routes together using routers which can be used for organization and to apply middleware to a specific group of routes.",
            "creatingRouter": {
              "description": "Create a Router object and register it with the application for routes with a certain prefix.",
              "code": "const router = express.Router();\napp.use('/prefix', router);\nrouter.use(middlewareFunction);\nrouter.get('/endpoint', routerHandler); // URL is /prefix/endpoint"
            }
          },
          "connectingToDatabases": {
            "title": "Connecting to Databases",
            "description": "The following libraries can help you connect to different databases:",
            "libraries": [
              {
                "name": "mongoose",
                "description": "for connecting to a MongoDB database.",
                "link": "https://mongoosejs.com/"
              },
              {
                "name": "sequelize",
                "description": "ORM for SQL databases like PostgreSQL, MySQL, etc.",
                "link": "https://sequelize.org/"
              },
              {
                "name": "objection",
                "description": "ORM for SQL databases (PostgreSQL, MySQL, etc.).",
                "link": "https://vincit.github.io/objection.js/"
              },
              {
                "name": "waterline",
                "description": "ORM for SQL databases (PostgreSQL, MySQL, etc.).",
                "link": "https://waterlinejs.org/"
              }
            ]
          },
          "makingApiCalls": {
            "title": "Making API Calls",
            "description": "While you can't use fetch natively in Node, and jQuery is only a frontend library, you have some alternatives for making API calls.",
            "options": [
              {
                "name": "node-fetch",
                "description": "A library that replicates the browser's fetch function.",
                "link": "https://www.npmjs.com/package/node-fetch"
              },
              {
                "name": "Axios",
                "description": "A powerful library for making HTTP requests.",
                "link": "https://axios-http.com/"
              },
              {
                "name": "GOT",
                "description": "A versatile HTTP request library.",
                "link": "https://github.com/sindresorhus/got"
              },
              {
                "name": "needle",
                "description": "Another HTTP client library.",
                "link": "https://www.npmjs.com/package/needle"
              }
            ]
          }
    },
    "mongodb":{
        "mongodbOverview": {
          "title": "MongoDB",
          "description": "MongoDB is a document database and can be installed locally or hosted in the cloud."
        },
        "databaseComparison": {
          "title": "SQL vs Document Databases",
          "description": [
            "SQL databases are considered relational databases. They store related data in separate tables. When data is needed, it is queried from multiple tables to join the data back together.",
            "MongoDB is a document database which is often referred to as a non-relational database. This does not mean that relational data cannot be stored in document databases. It means that relational data is stored differently. A better way to refer to it is as a non-tabular database.",
            "MongoDB stores data in flexible documents. Instead of having multiple tables you can simply keep all of your related data together. This makes reading your data very fast.",
            "You can still have multiple groups of data too. In MongoDB, instead of tables, these are called collections."
          ]
        },
        "localVsCloud": {
          "title": "Local vs Cloud Database",
          "description": [
            "MongoDB can be installed locally, which will allow you to host your own MongoDB server on your hardware. This requires you to manage your server, upgrades, and any other maintenance.",
            "You can download and use the MongoDB open source Community Server on your hardware for free.",
            "However, for this course we are going to use MongoDB Atlas, a cloud database platform. This is much easier than hosting your own local database.",
            "To be able to experiment with the code examples, you will need access to a MongoDB database.",
            "Sign up for a free MongoDB Atlas account to get started."
          ]
        },
        "creatingCluster": {
          "title": "Creating a Cluster",
          "description": [
            "After you have created your account, set up a free 'Shared Cluster' then choose your preferred cloud provider and region.",
            "By default, MongoDB Atlas is completely locked down and has no external access.",
            "You will need to set up a user and add your IP address to the list of allowed IP addresses.",
            "Under 'Database Access', create a new user and keep track of the username and password.",
            "Next, under 'Network Access', add your current IP address to allow access from your computer."
          ]
        },
        "installMongoDBShell": {
          "title": "Install MongoDB Shell (mongosh)",
          "description": [
            "There are many ways to connect to your MongoDB database.",
            "We will start by using the MongoDB Shell, mongosh.",
            "Use the official instructions to install mongosh on your operating system.",
            "To verify that it has been installed properly, open your terminal and type: mongosh --version",
            "You should see that the latest version is installed.",
            "The version used in this tutorial is v1.3.1."
          ]
        },
        "connectToDatabase": {
          "title": "Connect to the database",
          "description": [
            "To connect to your database, you will need your database specific connection string.",
            "In the MongoDB Atlas dashboard, under 'Databases', click the 'Connect' button for your Cluster.",
            "Next, choose 'Connect with the MongoDB Shell'.",
            "Copy your connection string.",
            "Example: Your connection string should look similar to this: mongosh 'mongodb+srv://cluster0.ex4ht.mongodb.net/myFirstDatabase' --apiVersion 1 --username YOUR_USER_NAME"
          ]
        }, 
        "mongoCommands": {
            "showDatabases": {
              "title": "Show Databases",
              "description": "Displays all databases on the MongoDB server.",
              "codeSnippet": [
                "show dbs",
                "db // prints the current database"
              ]
            },
            "switchDatabase": {
              "title": "Switch Database",
              "description": "Switches the context to a specific database.",
              "codeSnippet": "use <database_name>"
            },
            "showCollections": {
              "title": "Show Collections",
              "description": "Displays all collections in the current database.",
              "codeSnippet": "show collections"
            },
            "runJavaScriptFile": {
              "title": "Run JavaScript File",
              "description": "Executes a JavaScript file in the context of the MongoDB shell.",
              "codeSnippet": "load(\"myScript.js\")"
            },
            "databasesAndCollections": {
              "title": "Databases and Collections",
              "operations": {
                "drop": {
                  "title": "Drop",
                  "description": "Removes the specified collection and its index definitions or drops the entire database.",
                  "codeSnippet": [
                    "db.coll.drop() // removes the collection and its index definitions",
                    "db.dropDatabase() // double check that you are *NOT* on the PROD cluster..."
                  ]
                },
                "createCollection": {
                  "title": "Create Collection",
                  "description": "Creates a collection with a $jsonschema validator to enforce data integrity.",
                  "codeSnippet": "db.createCollection(\"contacts\", {\n   validator: {$jsonSchema: {\n      bsonType: \"object\",\n      required: [\"phone\"],\n      properties: {\n         phone: {\n            bsonType: \"string\",\n            description: \"must be a string and is required\"\n         },\n         email: {\n            bsonType: \"string\",\n            pattern: \"@mongodb.com$\",\n            description: \"must be a string and match the regular expression pattern\"\n         },\n         status: {\n            enum: [ \"Unknown\", \"Incomplete\" ],\n            description: \"can only be one of the enum values\"\n         }\n      }\n   }}\n})"
                }
              }
            }, 
            "CRUD": {
              "Create": {
                "title": "Create",
                "commands": [
                  {
                    "operation": "insertOne",
                    "description": "Inserts a single document into the collection.",
                    "code": "db.coll.insertOne({name: \"Max\"})"
                  },
                  {
                    "operation": "insertMany",
                    "description": "Performs an ordered bulk insert of multiple documents.",
                    "code": "db.coll.insertMany([{name: \"Max\"}, {name:\"Alex\"}])"
                  },
                  {
                    "operation": "unorderedInsertMany",
                    "description": "Performs an unordered bulk insert of multiple documents.",
                    "code": "db.coll.insertMany([{name: \"Max\"}, {name:\"Alex\"}], {ordered: false})"
                  },
                  {
                    "operation": "insertOneWithDate",
                    "description": "Inserts a single document with the current ISO date.",
                    "code": "db.coll.insertOne({date: ISODate()})"
                  },
                  {
                    "operation": "insertOneWithWriteConcern",
                    "description": "Inserts a single document with a specified write concern.",
                    "code": "db.coll.insertOne({name: \"Max\"}, {\"writeConcern\": {\"w\": \"majority\", \"wtimeout\": 5000}})"
                  }
                ]
              },
              "Read": {
                "title": "Read",
                "commands": [
                  {
                    "operation": "findOne",
                    "description": "Returns a single document from the collection.",
                    "code": "db.coll.findOne()"
                  },
                  {
                    "operation": "find",
                    "description": "Returns a cursor to the documents that can be iterated over.",
                    "code": "db.coll.find()"
                  },
                  {
                    "operation": "findWithCondition",
                    "description": "Returns documents that meet the specified conditions.",
                    "code": "db.coll.find({name: \"Max\", age: 32})"
                  },
                  {
                    "operation": "distinct",
                    "description": "Finds the distinct values for a specified field across a single collection.",
                    "code": "db.coll.distinct(\"name\")"
                  },
                  {
                    "operation": "countDocuments",
                    "description": "Counts the number of documents that match the query.",
                    "code": "db.coll.countDocuments({age: 32})"
                  },
                  {
                    "operation": "estimatedDocumentCount",
                    "description": "Provides an estimated count of documents in a collection.",
                    "code": "db.coll.estimatedDocumentCount()"
                  }
                ]
              
              },
              "comparisonOperators": {
                "title": "Comparison Operators",
                "commands": [
                  {"query": "db.coll.find({'year': {$gt: 1970}})", "description": "Finds documents where 'year' is greater than 1970."},
                  {"query": "db.coll.find({'year': {$gte: 1970}})", "description": "Finds documents where 'year' is greater than or equal to 1970."},
                  {"query": "db.coll.find({'year': {$lt: 1970}})", "description": "Finds documents where 'year' is less than 1970."},
                  {"query": "db.coll.find({'year': {$lte: 1970}})", "description": "Finds documents where 'year' is less than or equal to 1970."},
                  {"query": "db.coll.find({'year': {$ne: 1970}})", "description": "Finds documents where 'year' is not equal to 1970."},
                  {"query": "db.coll.find({'year': {$in: [1958, 1959]}})", "description": "Finds documents where 'year' is either 1958 or 1959."},
                  {"query": "db.coll.find({'year': {$nin: [1958, 1959]}})", "description": "Finds documents where 'year' is neither 1958 nor 1959."}
                ]
              },
              "logicalOperators": {
                "title": "Logical Operators",
                "commands": [
                  {"query": "db.coll.find({name: {$not: {$eq: 'Max'}}})", "description": "Finds documents where 'name' is not 'Max'."},
                  {"query": "db.coll.find({$or: [{'year': 1958}, {'year': 1959}]})", "description": "Finds documents where 'year' is either 1958 or 1959."},
                  {"query": "db.coll.find({$nor: [{price: 1.99}, {sale: true}]})", "description": "Finds documents where neither 'price' is 1.99 nor 'sale' is true."},
                  {
                    "query": "db.coll.find({$and: [{$or: [{qty: {$lt: 10}}, {qty: {$gt: 50}}]}, {$or: [{sale: true}, {price: {$lt: 5}}]}]})",
                    "description": "Finds documents where 'qty' is either less than 10 or greater than 50, and either 'sale' is true or 'price' is less than 5."
                  }
                ]
              },
              "elementOperators": {
                "title": "Element Operators",
                "commands": [
                  {"query": "db.coll.find({name: {$exists: true}})", "description": "Finds documents where 'name' field exists."},
                  {"query": "db.coll.find({'zipCode': {$type: 2}})", "description": "Finds documents where 'zipCode' is a string."},
                  {"query": "db.coll.find({'zipCode': {$type: 'string'}})", "description": "Finds documents where 'zipCode' is a string."}
                ]
              },
              "aggregationPipeline": {
                "title": "Aggregation Pipeline",
                "commands": [
                  {
                    "query": "db.coll.aggregate([{$match: {status: 'A'}}, {$group: {_id: '$cust_id', total: {$sum: '$amount'}}}, {$sort: {total: -1}}])",
                    "description": "Aggregates documents by 'cust_id', sums 'amount' for each, and sorts by 'total' in descending order."
                  }
                ]
              },
              "textSearch": {
                "title": "Text Search",
                "commands": [
                  {
                    "query": "db.coll.find({$text: {$search: 'cake'}}, {score: {$meta: 'textScore'}}).sort({score: {$meta: 'textScore'}})",
                    "description": "Performs a text search for 'cake' and sorts results by text score."
                  }
                ]
              },
              "regexQueries": {
                "title": "Regex Queries",
                "commands": [
                  {
                    "query": "db.coll.find({name: /^Max/})",
                    "description": "Finds documents where 'name' starts with 'Max'."
                  },
                  {
                    "query": "db.coll.find({name: /^Max$/i})",
                    "description": "Finds documents where 'name' matches 'Max' exactly, case insensitive."
                  }
                ]
              },
              "arrayOperations": {
                "title": "Array Operations",
                "commands": [
                  {
                    "query": "db.coll.find({tags: {$all: ['Realm', 'Charts']}})",
                    "description": "Finds documents where 'tags' array contains both 'Realm' and 'Charts'."
                  },
                  {
                    "query": "db.coll.find({field: {$size: 2}})",
                    "description": "Finds documents where 'field' array has exactly two elements."
                  },
                  {
                    "query": "db.coll.find({results: {$elemMatch: {product: 'xyz', score: {$gte: 8}}}})",
                    "description": "Finds documents where 'results' array contains at least one element with 'product' as 'xyz' and 'score' greater than or equal to 8."
                  }
                ]
              },
              "projectionQueries": {
                "title": "Projection Queries",
                "commands": [
                  {
                    "query": "db.coll.find({'x': 1}, {'actors': 1})",
                    "description": "Finds documents matching {'x': 1} and projects the 'actors' field along with '_id'."
                  },
                  {
                    "query": "db.coll.find({'x': 1}, {'actors': 1, '_id': 0})",
                    "description": "Finds documents matching {'x': 1} and projects only the 'actors' field, excluding '_id'."
                  },
                  {
                    "query": "db.coll.find({'x': 1}, {'actors': 0, 'summary': 0})",
                    "description": "Finds documents matching {'x': 1} and excludes the 'actors' and 'summary' fields from the result."
                  }
                ]
              },
              "sortSkipLimitQueries": {
                "title": "Sort, Skip, Limit Queries",
                "commands": [
                  {
                    "query": "db.coll.find({}).sort({'year': 1, 'rating': -1}).skip(10).limit(3)",
                    "description": "Finds documents, sorts by 'year' ascending and 'rating' descending, skips the first 10, and limits the result to 3 documents."
                  }
                ]
              },
              "readConcernQueries": {
                "title": "Read Concern",
                "commands": [
                  {
                    "query": "db.coll.find().readConcern('majority')",
                    "description": "Executes a read query that only considers data acknowledged by the majority of the replica set members."
                  }
                ]
              },
              "updateOperations": {
      "title": "Update Operations",
      "description": "Basic field update operations using various operators.",
      "commands": [
        {
          "description": "Sets 'year' to 2016 and 'name' to Max.",
          "code": "db.coll.updateOne({'_id': 1}, {$set: {'year': 2016, 'name': 'Max'}})"
        },
        {
          "description": "Removes the 'year' field from the document.",
          "code": "db.coll.updateOne({'_id': 1}, {$unset: {'year': 1}})"
        },
        {
          "description": "Renames the 'year' field to 'date'.",
          "code": "db.coll.updateOne({'_id': 1}, {$rename: {'year': 'date'}})"
        },
        {
          "description": "Increments 'year' by 5.",
          "code": "db.coll.updateOne({'_id': 1}, {$inc: {'year': 5}})"
        },
        {
          "description": "Multiplies 'price' by 1.25 and 'qty' by 2.",
          "code": "db.coll.updateOne({'_id': 1}, {$mul: {'price': NumberDecimal('1.25'), 'qty': 2}})"
        },
        {
          "description": "Sets 'imdb' to minimum value of 5.",
          "code": "db.coll.updateOne({'_id': 1}, {$min: {'imdb': 5}})"
        },
        {
          "description": "Sets 'imdb' to maximum value of 8.",
          "code": "db.coll.updateOne({'_id': 1}, {$max: {'imdb': 8}})"
        },
        {
          "description": "Sets 'lastModified' to the current date.",
          "code": "db.coll.updateOne({'_id': 1}, {$currentDate: {'lastModified': true}})"
        },
        {
          "description": "Sets 'lastModified' to the current timestamp.",
          "code": "db.coll.updateOne({'_id': 1}, {$currentDate: {'lastModified': {$type: 'timestamp'}}})"
        }
      ]
              },
              "arrayUpdates": {
      "description": "Operations specific to updating arrays within documents.",
      "commands": [
        {
          "description": "Pushes an element to the 'array'.",
          "code": "db.coll.updateOne({'_id': 1}, {$push: {'array': 1}})"
        },
        {
          "description": "Removes an element from the 'array'.",
          "code": "db.coll.updateOne({'_id': 1}, {$pull: {'array': 1}})"
        },
        {
          "description": "Adds an element to the 'array' if it does not already exist.",
          "code": "db.coll.updateOne({'_id': 1}, {$addToSet: {'array': 2}})"
        },
        {
          "description": "Removes the last element from the 'array'.",
          "code": "db.coll.updateOne({'_id': 1}, {$pop: {'array': 1}})"
        },
        {
          "description": "Removes the first element from the 'array'.",
          "code": "db.coll.updateOne({'_id': 1}, {$pop: {'array': -1}})"
        },
        {
          "description": "Removes all occurrences of specified elements from the 'array'.",
          "code": "db.coll.updateOne({'_id': 1}, {$pullAll: {'array': [3, 4, 5]}})"
        },
        {
          "description": "Pushes multiple elements to the 'scores' array.",
          "code": "db.coll.updateOne({'_id': 1}, {$push: {'scores': {$each: [90, 92]}}})"
        },
        {
          "description": "Pushes and sorts elements in the 'scores' array.",
          "code": "db.coll.updateOne({'_id': 2}, {$push: {'scores': {$each: [40, 60], $sort: 1}}})"
        },
        {
          "description": "Updates an element in the 'grades' array if it matches a condition.",
          "code": "db.coll.updateOne({'_id': 1, 'grades': 80}, {$set: {'grades.$': 82}})"
        },
        {
          "description": "Increments all elements in the 'grades' array.",
          "code": "db.coll.updateMany({}, {$inc: {'grades.$[]': 10}})"
        },
        {
          "description": "Sets specific elements in the 'grades' array based on a condition.",
          "code": "db.coll.updateMany({}, {$set: {'grades.$[element]': 100}}, {multi: true, arrayFilters: [{'element': {$gte: 100}}]})"
        }
      ]
              },
              "advancedUpdateOperations": {
                "title": "Advanced Update Operations",
                "commands": [
                  {
                    "description": "Atomically finds a document and updates it while returning the updated document.",
                    "code": "db.coll.findOneAndUpdate({'name': 'Max'}, {$inc: {'points': 5}}, {returnNewDocument: true})"
                  },
                  {
                    "description": "Updates an existing document or inserts a new document if it does not exist (upsert).",
                    "code": "db.coll.updateOne({'_id': 1}, {$set: {item: 'apple'}, $setOnInsert: {defaultQty: 100}}, {upsert: true})"
                  },
                  {
                    "description": "Replaces a document with a new document.",
                    "code": "db.coll.replaceOne({'name': 'Max'}, {'firstname': 'Maxime', 'surname': 'Beugnet'})"
                  },
                  {
                    "description": "Updates multiple documents while specifying the write concern.",
                    "code": "db.coll.updateMany({}, {$set: {'x': 1}}, {'writeConcern': {'w': 'majority', 'wtimeout': 5000}})"
                  }
                ]
              },
              "deleteOperations": {
                "title": "Delete Operations",
                "commands": [
                  {
                    "description": "Deletes a single document matching the specified criteria.",
                    "code": "db.coll.deleteOne({name: 'Max'})"
                  },
                  {
                    "description": "Deletes multiple documents that match the specified criteria with write concern.",
                    "code": "db.coll.deleteMany({name: 'Max'}, {'writeConcern': {'w': 'majority', 'wtimeout': 5000}})"
                  },
                  {
                    "description": "Deletes all documents in the collection (use with caution).",
                    "code": "db.coll.deleteMany({})"
                  },
                  {
                    "description": "Atomically finds a document and deletes it.",
                    "code": "db.coll.findOneAndDelete({'name': 'Max'})"
                  }
                ]
              }

            }
        }
    },
    "vueJs":{
      "vueIntroduction": {
        "title": "Introduction to Vue.js",
        "description": "Vue is a front-end JavaScript framework written in JavaScript. It is known for being lightweight and easy to start with, compared to other similar frameworks like React and Angular.",
        "scriptTag": {
          "title": "How to Add Vue to Your Web Page",
          "code": "<script src='https://unpkg.com/vue@3/dist/vue.global.js'></script>"
        }
      },
      "whyLearnVue": {
        "title": "Why Learn Vue?",
        "points": [
          "It is simple and easy to use.",
          "It can handle both simple and complex projects.",
          "It enjoys growing popularity and strong community support.",
          "Unlike plain JavaScript, Vue abstracts the complexities of how HTML and JavaScript connect, focusing instead on the connection itself.",
          "Vue enables efficient development with features like template-based syntax, two-way data binding, and centralized state management."
        ]
      },
      "firstVuePage": {
        "title": "My First Vue Page",
        "htmlContent": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n  <title>My first Vue page</title>\n</head>\n<body>\n\n  <div id='app'>\n    {{ message }}\n  </div>\n\n  <script src='https://unpkg.com/vue@3/dist/vue.global.js'></script>\n\n  <script>\n    const app = Vue.createApp({\n      data() {\n        return {\n          message: \"Hello World!\"\n        }\n      }\n    })\n   app.mount('#app')\n  </script>\n</body>\n</html>"
      },
      "creatingAppWithVite": {
        "title": "Creating Your App with Vite",
        "description": "Quick Vue3 development environment setup using Vite.",
        "commands": [
          "npm init vite-app <project-name>",
          "cd <project-name>",
          "npm install",
          "npm run dev"
        ]
      },
      "templateSyntax": {
        "title": "Template Syntax",
        "textInterpolation": {
          "description": "Text Interpolation Options",
          "examples": [
            "<span> {{ msg }} </span>",
            "<span v-text='msg'></span>"
          ]
        },
        "settingInnerHTML": {
          "description": "Setting Inner HTML",
          "code": "<span v-html='rawHTML'></span>"
        },
        "jsExpressions": {
          "title": "Using JavaScript Expressions",
          "validExample": "<span> {{ msg.reverse() }} </span>",
          "invalidExample": "<span> {{ let msg = 'hi' }} </span>"
        }
      },
      "directives": {
        "title": "Vue Directives",
        "description": "Directives are special tokens in the markup that tell the library to do something to a DOM element.",
        "list": [
          {"name": "v-if", "usage": "Puts element in DOM if condition is true."},
          {"name": "v-else-if", "usage": "Used for else-if condition."},
          {"name": "v-else", "usage": "Used for else condition."},
          {"name": "v-show", "usage": "Toggles display CSS property based on the truthiness of the expression."},
          {"name": "v-text", "usage": "Sets the inner text of an element."},
          {"name": "v-html", "usage": "Sets the inner HTML of an element."},
          {"name": "v-for", "usage": "Renders a list by looping over items."},
          {"name": "v-on or @", "usage": "Attaches an event listener."},
          {"name": "v-bind or :", "usage": "Dynamically binds one or more attributes, or a component prop to an expression."},
          {"name": "v-model", "usage": "Creates a two-way binding on an input or a component."},
          {"name": "v-once", "usage": "Renders plain HTML elements only once, and they do not update with reactive data changes."}
        ]
      },
      "conditionalRendering": {
        "title": "Conditional Rendering",
        "examples": [
          {"expression": "v-if='date == today'", "description": "Renders the element if date equals today."},
          {"expression": "v-else-if='!done'", "description": "Renders the element if the previous v-if or v-else-if was false and this condition is true."},
          {"expression": "v-else", "description": "Renders the element if all preceding conditions are false."}
        ]
      },
      "eventHandling": {
        "title": "Handling Events",
        "description": "Vue.js provides v-on directive to listen to DOM events and execute some JavaScript when they’re triggered.",
        "examples": [
          {"event": "v-on:click='count'", "description": "Calls the 'count' method when the element is clicked."},
          {"modifiers": ".stop, .prevent, .once, .self", "description": "Event modifiers can be used to modify standard JavaScript event behaviors."}
        ]
      },
      "listRendering": {
        "title": "List Rendering",
        "examples": [
          {"usage": "v-for='item in items'", "description": "Renders a list by repeating the element for each item in an array."},
          {"usage": "v-for='(item, index) in items'", "description": "Renders a list and also provides access to the index of the current item in the loop."}
        ]
      },
      "dataBinding": {
        "title": "Binding Data",
        "examples": [
          {"binding": "v-bind:id='objectID'", "description": "Binds the id attribute to the value of objectID."},
          {"binding": "v-model='email'", "description": "Creates a two-way binding on an input field so that it automatically updates the data property when the user types."},
          {"binding": "v-bind:class='{ error: hasError }'", "description": "Conditionally applies the 'error' class based on the truthiness of 'hasError'."}
        ]
      },
      "inputModifiers": {
        "title": "Input Modifiers",
        "description": "Modifiers that can be used on <input> elements to alter their default behavior.",
        "modifiers": [
          { "name": ".lazy", "usage": "Updates on change event instead of on input." },
          { "name": ".trim", "usage": "Removes whitespace from the input." }
        ]
      },
      "bindingClassStyle": {
        "title": "Binding Class and Style",
        "examples": [
          { "binding": "<input :class='{error: hasError}' />", "description": "Binds the 'error' class based on the truthiness of 'hasError'." },
          { "binding": "<input :style='{margin: space + \"px\"}' />", "description": "Dynamically binds the 'margin' style to 'space' in pixels." }
        ]
      },
      "vueLifecycleHooks": {
        "title": "Vue.js Lifecycle Hooks",
        "description": "Important lifecycle hooks in Vue.js for managing component behavior through different stages.",
        "hooks": [
          { "name": "onBeforeMount", "description": "Called right before the mounting begins: the render function is about to be called for the first time." },
          { "name": "onMounted", "description": "Called after the instance has been mounted, where element, passed to app.mount, is replaced by the newly created vm.$el." },
          { "name": "onBeforeUpdate", "description": "Called when data changes, before the DOM is patched." },
          { "name": "onUpdated", "description": "Called after data changes on your component and the DOM re-renders." },
          { "name": "onBeforeUnmount", "description": "Called right before a Vue instance is unmounted." },
          { "name": "onUnmounted", "description": "Called after a Vue instance has been unmounted." }
        ],
        "example": "import { onMounted } from 'vue'; setup() { onMounted(() => { console.log('component mounted!') }); }"
      },
      "watchEffectFunction": {
        "title": "watchEffect Function",
        "description": "Automatically tracks reactive dependencies used during the function execution and re-runs if any dependencies change.",
        "usage": "const site = ref('learnvue.co'); watchEffect(() => { console.log(site.value); });"
      },
      "templateRefs": {
        "title": "Template Refs",
        "description": "References to DOM elements within Vue templates.",
        "usage": "<div ref='example'>Example Div</div>",
        "script": "setup() { const example = ref(null); onMounted(() => { console.log(example.value); }); return { example }; }"
      },
      "topVueLibraries": {
        "title": "Top Vue Libraries",
        "libraries": [
          { "name": "vue-cli", "description": "Provides a full system for rapid Vue development." },
          { "name": "vue-router", "description": "The official router for Vue.js." },
          { "name": "vuex", "description": "State management library for Vue.js." }
        ]
      }

    },
    "angularJs":{
      "angularJSIntroduction": {
        "title": "What is AngularJS?",
        "description": "AngularJS is a JavaScript framework designed to build dynamic web applications. It extends HTML with additional attributes called directives and binds data to HTML with expressions.",
        "scriptTag": "<script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js'></script>"
      },
      "extendsHTML": {
        "title": "AngularJS Extends HTML",
        "directives": [
          {
            "name": "ng-app",
            "usage": "Defines an AngularJS application."
          },
          {
            "name": "ng-model",
            "usage": "Binds the value of HTML controls (input, select, textarea) to application data."
          },
          {
            "name": "ng-bind",
            "usage": "Binds application data to the HTML view."
          }
        ]
      },
      "angularJSHistory": {
        "title": "AngularJS History",
        "content": [
          "AngularJS version 1.0 was released in 2012.",
          "Miško Hevery, a Google employee, started working on AngularJS in 2009.",
          "The project quickly gained traction and is now officially supported by Google."
        ]
      },
      "example": {
        "title": "AngularJS Example",
        "htmlContent": "<!DOCTYPE html><html><script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js'></script><body><div ng-app=''><p>Name: <input type='text' ng-model='name'></p><p ng-bind='name'></p></div></body></html>"
      },
      "setup": {
        "title": "Setup and Configuration",
        "commands": [
          {
            "command": "npm install -g @angular/cli",
            "description": "Installs Angular CLI globally."
          },
          {
            "command": "ng new best-practises --prefix best",
            "description": "Creates a new Angular project with a specific prefix for components."
          },
          {
            "command": "ng new --help",
            "description": "Displays help for the 'ng new' command."
          },
          {
            "command": "ng new best-practises --dry-run",
            "description": "Simulates the creation of a new project without actually writing any files."
          }
        ]
      },
      "lintCommands": {
        "title": "Lint for Formatting",
        "commands": [
          {
            "command": "ng lint my-app --fix",
            "description": "Fixes code smells and formats code properly."
          },
          {
            "command": "ng lint my-app",
            "description": "Checks for linting issues in the specified Angular app."
          },
          {
            "command": "ng lint my-app --format stylish",
            "description": "Formats lint output in a stylish manner."
          },
          {
            "command": "ng lint my-app --help",
            "description": "Provides help for the lint command."
          }
        ]
      },
      "angularBlueprints": {
        "title": "Angular CLI Blueprints",
        "description": "Blueprints help to quickly scaffold elements like components, services, classes, interfaces, etc.",
        "commands": [
          {
            "command": "ng g d directive-name",
            "description": "Generate a new directive."
          },
          {
            "command": "ng g p init-caps",
            "description": "Generate a new pipe with a specified name."
          },
          {
            "command": "ng g cl models/customer",
            "description": "Generate a new class in the models directory."
          },
          {
            "command": "ng g c my-component --flat true",
            "description": "Generate a new component without creating a new folder."
          },
          {
            "command": "ng g i models/person",
            "description": "Generate a new interface in the models folder."
          },
          {
            "command": "ng g e models/gender",
            "description": "Generate a new enumeration in the models folder."
          },
          {
            "command": "ng g s service-name",
            "description": "Generate a new service."
          }
        ],
        "flags": [
          {
            "flag": "--spec",
            "usage": "Check if the template will be a .ts file."
          },
          {
            "flag": "--inline-template (-t)",
            "usage": "Check if the template will be inline within the .ts file."
          },
          {
            "flag": "--inline-style (-s)",
            "usage": "Check if the style will be inline within the .ts file."
          },
          {
            "flag": "--prefix",
            "usage": "Assign a specific prefix to the generated elements."
          }
        ]
      },
      "angularBuildingServing": {
        "title": "Building and Serving Angular Applications",
        "description": "Commands for building and serving Angular applications, allowing various configurations for development and production environments.",
        "commands": [
          {
            "command": "ng build",
            "description": "Builds the application and stores the output in the /dist folder."
          },
          {
            "command": "ng build --aot",
            "description": "Performs an Ahead-Of-Time compilation for the build."
          },
          {
            "command": "ng build --prod",
            "description": "Creates an optimized production build."
          },
          {
            "command": "ng serve -o",
            "description": "Serves the application and automatically opens it in a browser."
          },
          {
            "command": "ng serve --live-reload",
            "description": "Serves the application with live reload enabled."
          },
          {
            "command": "ng serve --ssl",
            "description": "Serves the application using SSL."
          }
        ]
      },
      "angularNewCapabilities": {
        "title": "Adding New Capabilities to Angular Projects",
        "description": "Commands to add new libraries or capabilities to Angular projects.",
        "commands": [
          {
            "command": "ng add @angular/material",
            "description": "Adds Angular Material to the project."
          },
          {
            "command": "ng g @angular/material:material-nav --name nav",
            "description": "Generates a Material Design navigation component."
          }
        ]
      },
      "angularComponentsTemplates": {
        "title": "Components and Templates",
        "description": "Components are fundamental UI building blocks in Angular. They form the application's structure.",
        "sampleComponent": {
          "title": "Sample Component",
          "code": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less']\n})\n\nexport class AppComponent {\n  title = 'Hello World';\n}"
        }
      },
      "inputOutput": {
        "title": "Input and Output",
        "description": "Angular's @Input and @Output decorators facilitate component interaction by allowing data to flow between parent and child components.",
        "examples": [
          {
            "context": "Input - Passing data to a child component",
            "childComponent": {
              "code": "export class SampleComponent {\n  @Input() value: any; // can be any type like string, object, etc.\n}"
            },
            "parentUsage": "<app-sample-component [value]=\"myValue\"></app-sample-component>"
          },
          {
            "context": "Output - Emitting events to a parent component",
            "childComponent": {
              "code": "@Output() myEvent: EventEmitter = new EventEmitter();\n\nonRemoved(item: MyModel) {\n  this.myEvent.emit(item);\n}"
            },
            "parentUsage": "<app-my-component (myEvent)=\"someFunction()\"></app-my-component>"
          }
        ]
      },
      "viewChildDecorator": {
        "title": "ViewChild Decorator",
        "description": "ViewChild allows a one-component hierarchical relationship to access another component, directive, or DOM element directly.",
        "usage": {
          "code": "@ViewChild(NumberComponent)\nprivate numberComponent: NumberComponent;\n\nincrease() {\n  this.numberComponent.increaseByOne();\n}\n\ndecrease() {\n  this.numberComponent.decreaseByOne();\n}"
        }
      },
      "angularRouting": {
        "title": "Angular Routing",
        "description": "Angular Router enables navigation from one view to another as users perform application tasks.",
        "sampleRouting": {
          "title": "Sample Routing Configuration",
          "code": "const appRoutes: Routes = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'prod/:id', component: HeroDetailComponent },\n  {\n    path: 'products',\n    component: ProductListComponent,\n    data: { title: 'Products List' }\n  },\n  { path: '',\n    redirectTo: '/products',\n    pathMatch: 'full'\n  },\n  { path: '**', component: PageNotFoundComponent }\n];\n\nRouterModule.forRoot(appRoutes)"
        }
      },
      "angularModules": {
        "title": "Angular Modules",
        "description": "Angular applications are modular and use NgModules to organize code into cohesive blocks related to an application domain, workflow, or set of capabilities.",
        "sampleModule": {
          "title": "Sample Module Configuration",
          "code": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent], // components, pipes, directives\n  imports: [BrowserModule, AppRoutingModule], // other modules the app uses\n  providers: [], // services\n  bootstrap: [AppComponent] // root component\n})\nexport class AppModule { }"
        }
      },
      "angularServices": {
        "title": "Angular Services",
        "description": "Services in Angular are broadly used to share business logic, data interaction, and function as data providers across components without duplicating code.",
        "sampleService": {
          "title": "Sample Service with Data Fetching Function",
          "code": "@Injectable()\nexport class MyService {\n  public items: Item[];\n\n  constructor() { }\n\n  getSth() {\n    // some implementation\n  }\n}"
        }
      },
      "httpClient": {
        "title": "HttpClient",
        "description": "HttpClient is used to handle HTTP requests within Angular applications, providing an easy way to interact with APIs and fetch or send data.",
        "setup": {
          "importModule": "import { HttpClientModule } from '@angular/common/http';",
          "usage": "The HttpClientModule must be imported in your Angular application's main module."
        },
        "methods": {
          "GET": {
            "code": "import { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class DataService {\n  constructor(private http: HttpClient) { }\n\n  public getData(): Observable<any> {\n    return this.http.get('api/users/2');\n  }\n}",
            "description": "Example of using HttpClient to perform a GET request."
          },
          "POST": {
            "code": "import { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable()\nexport class DataService {\n  constructor(private http: HttpClient) { }\n\n  public send(val1: any, val2: any): Observable<any> {\n    const object = new SendModel(val1, val2);\n    const options = { headers: new HttpHeaders({'Content-type': 'application/json'}) };\n    return this.http.post(environment.apiUrl + 'api/login', object, options);\n  }\n}",
            "description": "Example of using HttpClient to perform a POST request."
          }
        }
      },
      "angularForms": {
        "title": "Angular Forms",
        "description": "Angular provides two types of forms: Template-Driven Forms and Reactive Forms. Here we focus on Template-Driven Forms.",
        "templateDrivenForms": {
          "description": "In Template-Driven Forms, form logic like validation is kept in the template itself.",
          "sampleHtml": "<form name='form' (ngSubmit)='f.form.valid && onSubmit()' #f='ngForm' novalidate>\n  <div class='form-group'>\n    <label for='firstName'>First Name</label>\n    <input type='text' class='form-control' name='firstName' [(ngModel)]='model.firstName' #firstName='ngModel' [ngClass]='{\"is-invalid\": f.submitted && firstName.invalid}' required />\n    <div *ngIf='f.submitted && firstName.invalid' class='invalid-feedback'>\n      <div *ngIf='firstName.errors.required'>First Name is required</div>\n    </div>\n  </div>\n  <div class='form-group'>\n    <button class='btn btn-primary'>Register</button>\n  </div>\n</form>"
        }
      },
      "unitTesting": {
        "title": "Unit Testing in Angular",
        "description": "Unit testing in Angular is typically done using the Jasmine test framework, which allows for behavior-driven development.",
        "serviceTests": {
          "description": "Testing services in Angular involves checking the functionality independently of the component it might be used in.",
          "example": "describe('MyService', () => {\n  let service: MyService;\n  beforeEach(() => service = new MyService();\n  it('#fetch should update data', () => {\n    service.fetchData();\n    expect(service.data.length).toBe(4);\n    expect(service.data[0].id).toBe(1);\n  });\n});",
          "asyncTests": {
            "description": "For asynchronous operations, tests must handle the timing of data responses.",
            "example": "it('http client works', (done: DoneFn) => {\n  service.getUser().subscribe((data) => {\n    expect(data).toBe('test');\n    done();\n  });\n});"
          }
        }
      }


    },
    "reactJS":{

    },
    "javaScript":{


    }
}